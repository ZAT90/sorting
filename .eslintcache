[{"/Users/zat_km/Documents/React project/sorting/src/index.js":"1","/Users/zat_km/Documents/React project/sorting/src/App.js":"2","/Users/zat_km/Documents/React project/sorting/src/reportWebVitals.js":"3","/Users/zat_km/Documents/React project/sorting/src/components/Sidebar.js":"4","/Users/zat_km/Documents/React project/sorting/src/components/NavigationBar.js":"5","/Users/zat_km/Documents/React project/sorting/src/components/NavItem.js":"6","/Users/zat_km/Documents/React project/sorting/src/screens/bubble.js":"7","/Users/zat_km/Documents/React project/sorting/src/screens/merge.js":"8","/Users/zat_km/Documents/React project/sorting/src/screens/count.js":"9","/Users/zat_km/Documents/React project/sorting/src/styles/bubbleStyles.js":"10"},{"size":500,"mtime":1607191727142,"results":"11","hashOfConfig":"12"},{"size":802,"mtime":1610975943365,"results":"13","hashOfConfig":"12"},{"size":362,"mtime":1607191727143,"results":"14","hashOfConfig":"12"},{"size":2051,"mtime":1610975648575,"results":"15","hashOfConfig":"12"},{"size":1505,"mtime":1610976947371,"results":"16","hashOfConfig":"12"},{"size":1106,"mtime":1610975641520,"results":"17","hashOfConfig":"12"},{"size":11247,"mtime":1612271089578,"results":"18","hashOfConfig":"12"},{"size":249,"mtime":1610886640254,"results":"19","hashOfConfig":"12"},{"size":16347,"mtime":1612359167073,"results":"20","hashOfConfig":"12"},{"size":243,"mtime":1610947585231,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"1ac4d90",{"filePath":"25","messages":"26","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"24"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"24"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"24"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"24"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"24"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/zat_km/Documents/React project/sorting/src/index.js",[],["48","49"],"/Users/zat_km/Documents/React project/sorting/src/App.js",["50","51"],"import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport { NavigationBar } from './components/NavigationBar';\nimport { Bubble } from './screens/bubble';\nimport { Count } from './screens/count';\nimport { Merge } from './screens/merge';\nimport { Sidebar } from './components/Sidebar';\n\nfunction App() {\n  return (\n    <React.Fragment>\n      <Router>\n        \n        <Sidebar />\n        <Switch>\n          <Route exact path=\"/\" component={Bubble} />\n          <Route path=\"/count\" component={Count} />\n          <Route path=\"/merge\" component={Merge} />\n        </Switch>\n      </Router>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","/Users/zat_km/Documents/React project/sorting/src/reportWebVitals.js",[],"/Users/zat_km/Documents/React project/sorting/src/components/Sidebar.js",["52"],"import React, { useState } from 'react';\nimport styled from \"styled-components\";\nimport { NavItem } from './NavItem'\nconst StyledSideNav = styled.div`\n  position: fixed;     /* Fixed Sidebar (stay in place on scroll and position relative to viewport) */\n  height: 100%;\n  width: 75px;     /* Set the width of the sidebar */\n  z-index: 1;      /* Stay on top of everything */\n  top: 3.4em;      /* Stay at the top */\n  background-color: #222; /* Black */\n  overflow-x: hidden;     /* Disable horizontal scroll */\n  padding-top: 10px;\n`;\n\nfunction SideNav(params) {\n    const [activePath, setActivePath] = useState('/');\n    const [items, setItems] = useState([\n        {\n            path: '/', /* path is used as id to check which NavItem is active basically */\n            name: 'Bubble',\n            css: 'fa fa-fw fa-home',\n            key: 1 /* Key is required, else console throws error. Does this please you Mr. Browser?! */\n        },\n        {\n            path: '/count',\n            name: 'Count',\n            css: 'fa fa-fw fa-clock',\n            key: 2\n        },\n        {\n            path: '/merge',\n            name: 'Merge',\n            css: 'fas fa-hashtag',\n            key: 3\n        },\n    ]);\n    function onItemClick(path) {\n        setActivePath(path);/* Sets activePath which causes rerender which causes CSS to change */\n    }\n    return (\n        <StyledSideNav>\n            {\n                /* items = just array AND map() loops thru that array AND item is param of that loop */\n                items.map((item) => {\n                    /* Return however many NavItems in array to be rendered */\n                    return (\n                        <NavItem path={item.path} name={item.name} css={item.css} onItemClick={() => onItemClick(item.path)} /* Simply passed an entire function to onClick prop */ active={item.path === activePath} key={item.key} />\n                    )\n                })\n            }\n        </StyledSideNav>\n    )\n}\n\nexport function Sidebar() {\n\n    return (\n        <SideNav></SideNav>\n    );\n\n}","/Users/zat_km/Documents/React project/sorting/src/components/NavigationBar.js",["53","54","55"],"import React, { useState } from 'react';\nimport { Nav, Navbar, Form, FormControl } from 'react-bootstrap';\nimport styled from 'styled-components';\nimport Switch from \"react-switch\";\nconst Styles = styled.div`\n  .navbar { background-color: #222; }\n  a, .navbar-nav, .navbar-light .nav-link {\n    color: #9FFFCB;\n    &:hover { color: white; }\n  }\n  .navbar-brand {\n    font-size: 1.4em;\n    color: #9FFFCB;\n    &:hover { color: white; }\n  }\n  .form-center {\n    position: absolute !important;\n    left: 25%;\n    right: 25%;\n  }\n`;\nexport function NavigationBar({showConsole}) {\n  const [checked, setChecked] = useState(false);\n\n  // const handleChange =()=> {\n  //   setChecked(!checked);\n  // }\n  function handleChange() {\n    setChecked(!checked);\n    console.log('checked: '+checked);\n    showConsole(!checked);\n  }\n  return (\n    <Styles>\n      <Navbar className=\"mr-auto\" expand=\"lg\">\n        {/* <Navbar.Brand href=\"/\">Tutorial</Navbar.Brand> */}\n        {/* <Navbar.Toggle aria-controls=\"basic-navbar-nav\"/> */}\n        <label>\n          <span style={{ color: 'white', marginRight: 20 }}>{checked ? 'Turn off console' : 'Turn on console'}</span>\n          <Switch\n            onChange={() => handleChange()}\n            checked={checked} />\n        </label>\n        {/* <Form className=\"form-center\">\n         \n        </Form> */}\n        {/* <Navbar.Brand id=\"basic-navbar-nav\">\n         \n        </Navbar.Brand> */}\n      </Navbar>\n    </Styles>\n  )\n\n}\n// export const NavigationBar = () => (\n\n// )","/Users/zat_km/Documents/React project/sorting/src/components/NavItem.js",["56","57"],"import React from 'react';\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\nimport styled from \"styled-components\";\nconst NavIcon = styled.div`\n`;\nconst StyledNavItem = styled.div`\n  height: 70px;\n  width: 75px; /* width must be same size as NavBar to center */\n  text-align: center; /* Aligns <a> inside of NavIcon div */\n  margin-bottom: 0;   /* Puts space between NavItems */\n  a {\n    font-size: 2.7em;\n    \n    color: ${({active}) => active ? \"white\" : \"#9FFFCB\"};\n    :hover {\n      opacity: 0.7;\n      text-decoration: none; /* Gets rid of underlining of icons */\n    }  \n  }\n`;\n//color:\"white\";\n//color: ${(props) => props.active ? \"white\" : \"#9FFFCB\"};\nexport function NavItem({path,name,css,onItemClick,active}) {\n  function handleClick (path) {\n   // const { path, onItemClick } = this.props;\n    onItemClick(path);\n  }\n\n  return (\n    <StyledNavItem active={active}>\n    <Link to={path} className={css} onClick={()=>handleClick(path)}>\n      <NavIcon></NavIcon>\n    </Link>\n  </StyledNavItem>\n  );\n\n}\n// export default class NavItem extends React.Component {\n    \n//   }","/Users/zat_km/Documents/React project/sorting/src/screens/bubble.js",["58","59","60","61"],"import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport { Button, Modal } from 'react-bootstrap';\nimport { NavigationBar } from \"../components/NavigationBar\";\nconst GridWrapper = styled.div`\n  display: grid;\n  grid-gap: 10px;\n  margin-top: 1em;\n  margin-left: 6em;\n  margin-right: 6em;\n  grid-template-columns: repeat(12, 1fr);\n  grid-auto-rows: minmax(25px, auto);\n`;\n\nconst styles = {\n  container: { display: 'flex', flexDirection: 'row' },\n  swapDiv: { display: 'flex', justifyContent: 'center', alignItems: 'center', height: '10vh', width: '80vh' },\n  swapBtn: { backgroundColor: 'blue', width: 150 },\n  startBtn: { backgroundColor: 'black', width: 300 },\n  completeMsg: { color: 'black', marginLeft: 100, marginTop: 50 },\n  newGameBtn: { backgroundColor: 'black', width: 150, marginLeft: 200 },\n  consoleDiv: { display: 'flex', flex: 0.4, backgroundColor: 'grey', flexDirection: 'column' },\n  consoleDiv2: { display: 'flex', flexDirection: 'column' },\n  consoleHeader: { fontWeight: 'bold', fontSize: 20, textDecorationLine: 'underline' },\n  nestedForDiv: { display: 'flex', flexDirection: 'row', marginLeft: 10, marginTop: 20 },\n  nestedForConsole: { display: 'flex', flex: 0.5, backgroundColor: 'black', justifyContent: 'center', color: 'white',  },\n  nestedForText: { display: 'flex', flex: 0.5, marginLeft: 10, alignItems: 'center', },\n  ifDiv: { display: 'flex', flexDirection: 'row', marginLeft: 10, marginBottom: 30 },\n  ifConsole: { display: 'flex', flex: 0.5, backgroundColor: 'red', justifyContent: 'center', color: 'white' },\n  ifText: { display: 'flex', flex: 0.5, marginLeft: 10 },\n}\n\nexport function Bubble() {\n  const [isLevel, setIsLevel] = useState(false);\n  const [levelName, setLevelName] = useState('');\n  const [isFirstListSet, setIsFirstListSet] = useState(false);\n  const [initList, setInitList] = useState([]);\n  const [firstList, setFirstList] = useState([]);\n  const [score, setScore] = useState(0);\n  const [numToCompare, setNumToCompare] = useState(0);\n  const [highlightFirst, setHighlightFirst] = useState(0);\n  const [highlightSecond, setHighlightSecond] = useState(1);\n  const [show, setShow] = useState(false);\n  const [showConsole, setShowConsole] = useState(false);\n  const [chooseNums, setChooseNums] = useState([]);\n\n  function firstListGenerator(number) {\n    console.log('level name: ' + levelName);\n    if (firstList.includes(number)) {\n      const removeList = firstList.filter(item => item !== number);\n      setFirstList(removeList);\n    } else {\n      if (levelName === 'easy') {\n        if (firstList.length < 6) {\n\n          setFirstList(prevArray => [...prevArray, number])\n          //}\n\n        } else {\n          alert(\"beginner level can only select 6 numbers\");\n\n        }\n      } else if (levelName === 'medium') {\n        if (firstList.length < 8) {\n          setFirstList(prevArray => [...prevArray, number])\n        } else {\n          alert(\"medium level can only select 8 numbers\");\n        }\n      } else if (levelName === 'hard') {\n        if (firstList.length < 10) {\n          setFirstList(prevArray => [...prevArray, number])\n        } else {\n          alert(\"hard level can only select 10 numbers\");\n        }\n      }\n    }\n  }\n\n\n  function chooseItems() {\n    return (\n      chooseNums.map((number, i) =>\n        <Button\n          onClick={() => firstListGenerator(number)}\n          style={{ backgroundColor: firstList.includes(number) ? 'yellowgreen' : 'green' }} key={i} >{number}</Button>\n      )\n    )\n  }\n  function listItems() {\n    return (\n      firstList.map((number, i) =>\n        <Button\n          style={{ backgroundColor: (i === highlightFirst || i === highlightSecond) && numToCompare > 1 ? 'red' : 'green' }} key={i} >{number}</Button>\n      )\n    )\n  }\n  function generateChooseList(level) {\n    //console.log('gamelevel: ' + gameLevel);\n    setLevelName(level);\n    setIsLevel(true);\n    const randomArray = Array.from({ length: 42 }, () => Math.floor(Math.random() * 80));\n    let s = new Set(randomArray);\n    let it = s.values();\n    const randomArrayRedo = Array.from(it);\n    setChooseNums(randomArrayRedo);\n    setInitList(randomArrayRedo);\n  }\n\n  function highlightOperation(increment) {\n    console.log('highlightSecond: ' + highlightSecond);\n    console.log('numToCompare: ' + numToCompare);\n    if (highlightSecond + 1 === numToCompare) {\n      if (increment) {\n        setScore(score + 1);\n        setHighlightFirst(0);\n        setHighlightSecond(1);\n        setNumToCompare(numToCompare - 1);\n      } else {\n        setScore(score - 1);\n      }\n\n    } else {\n      if (increment) {\n        setScore(score + 1);\n        setHighlightFirst(highlightFirst + 1);\n        setHighlightSecond(highlightSecond + 1);\n      } else {\n        setScore(score - 1);\n      }\n    }\n\n\n  }\n  function swapNumbers() {\n    console.log(firstList[highlightFirst]);\n    console.log(firstList[highlightSecond]);\n    if (firstList[highlightFirst] > firstList[highlightSecond]) {\n      [firstList[highlightFirst], firstList[highlightSecond]] = [firstList[highlightSecond], firstList[highlightFirst]];\n      setFirstList(firstList);\n      highlightOperation(true);\n    } else {\n      setShow(true);\n      highlightOperation(false);\n    }\n  }\n  function noSwapNumbers() {\n    if (firstList[highlightFirst] === firstList[highlightSecond] || firstList[highlightFirst] < firstList[highlightSecond]) {\n      highlightOperation(true);\n    } else {\n      setShow(true);\n      highlightOperation(false);\n    }\n  }\n\n  function startSorting() {\n    if (levelName === 'easy') {\n      if (firstList.length < 6) {\n        alert(\"easy level has to select 6 numbers\");\n      } else {\n        setIsFirstListSet(true);\n        setNumToCompare(firstList.length);\n      }\n    } else if (levelName === 'medium') {\n      if (firstList.length < 8) {\n        alert(\"medium level has to select 8 numbers\");\n      } else {\n        setIsFirstListSet(true);\n        setNumToCompare(firstList.length);\n      }\n    } else if (levelName === 'hard') {\n      if (firstList.length < 10) {\n        alert(\"hard level has to select 10 numbers\");\n      } else {\n        setIsFirstListSet(true);\n        setNumToCompare(firstList.length);\n      }\n    }\n\n  }\n  console.log('checking on state reuse: ' + firstList);\n  console.log('num to compare: ' + numToCompare);\n  console.log('showConsole: ' + showConsole);\n  return (\n    <div>\n      <NavigationBar showConsole={(show) => setShowConsole(show)} />\n      <div style={styles.container}>\n\n        <div style={{ flex: 0.6 }}>\n          <h2 style={{ color: 'black', marginLeft: 100 }}>score: {score}</h2>\n          <GridWrapper>\n            {!isLevel && <Button onClick={() => generateChooseList('easy')} variant=\"primary\">Easy</Button>}{' '}\n            {!isLevel && <Button onClick={() => generateChooseList('medium')} variant=\"secondary\">Medium</Button>}{' '}\n            {!isLevel && <Button onClick={() => generateChooseList('hard')} variant=\"success\">Hard</Button>}{' '}\n\n          </GridWrapper>\n\n          {isLevel && <div>\n            {!isFirstListSet && <GridWrapper>\n\n              {chooseItems()}\n\n            </GridWrapper>}\n            <GridWrapper>\n              {isFirstListSet && listItems()}\n            </GridWrapper>\n            {!isFirstListSet && <div style={styles.swapDiv}>\n              <Button onClick={() => startSorting()} style={styles.startBtn} >Start Sorting</Button>\n            </div>}\n            {isFirstListSet && numToCompare > 1 && <div style={styles.swapDiv}>\n              <Button onClick={() => swapNumbers()} style={styles.swapBtn} >Swap</Button>\n          &nbsp;&nbsp;&nbsp;\n         <Button onClick={() => noSwapNumbers()} style={styles.swapBtn} >No Swap</Button>\n            </div>}\n\n          </div>}\n          {numToCompare === 1 &&\n            <div><h2 style={styles.completeMsg}>Well done! You have completed the game</h2>\n              <Button onClick={() => window.location.reload()} style={styles.newGameBtn} >Start new Game</Button>\n            </div>\n          }\n          <Modal show={show}>\n            <Modal.Header closeButton>\n              <Modal.Title>Wrong Move</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>Scores deducted! Please choose the right answer</Modal.Body>\n            <Modal.Footer>\n              <Button variant=\"secondary\" onClick={() => setShow(false)}>\n                OK\n          </Button>\n            </Modal.Footer>\n          </Modal>\n        </div>\n        {showConsole && consoleView()}\n      </div>\n    </div>\n  )\n\n  function consoleView() {\n    return (\n      <div style={styles.consoleDiv}>\n        <div style={styles.consoleDiv2}>\n          <span style={styles.consoleHeader}>Console</span>\n          <span style={{ marginLeft: 10 }}>array = [ {firstList.map((item, i, arr) => <span>{item} {i != (arr.length - 1) ? ',' : ''}</span>)}]</span>\n          {isFirstListSet && firstList.length - numToCompare > 0 && <span style={{ marginLeft: 10 }}>size = len(array)</span>}\n        </div>\n        {isFirstListSet && firstList.length - numToCompare > 0 && <div style={styles.nestedForDiv}>\n        <div style={styles.nestedForText}>for step in range of (0, size - 1) :\n        </div>\n          <div style={styles.nestedForConsole}>\n\n            step -&gt; 0....{firstList.length}-1\n          <br />\n            <span style={{ marginLeft: 10 }}>\n            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{returnNestedRange(firstList.length).map((item, i, arr) => <span style={{ color: firstList.length - numToCompare === i ? 'yellow' : 'white' }}>{item} {i != (arr.length - 1) ? ',' : ''}</span>)}\n            </span>\n          </div>\n\n          \n        </div>}\n        {!isFirstListSet ?\n          <div /> :\n          firstList.length - numToCompare === 0 && highlightFirst === 0 ?\n            <div /> :\n            <div style={styles.nestedForDiv}>\n\n              <div style={styles.nestedForText}>&nbsp;&nbsp;&nbsp;for j in range of (0, size - step - 1) :\n              \n              </div>\n              <div style={styles.nestedForConsole}>\n\n                  j --&gt; 0....{firstList.length}-{firstList.length - numToCompare}-1\n               <br />\n                  <span style={{ marginLeft: 50 }}>\n                    {returnNestedRange(numToCompare).map((item, i, arr) => <span style={{ color: highlightFirst === i ? 'red' : 'white' }}>{item} {i != (arr.length - 1) ? ',' : ''}</span>)}\n                  </span>\n                </div>\n            </div>}\n        {isFirstListSet && <div style={styles.ifDiv}>\n\n          <div style={styles.ifText}>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if array[j] &gt; array [j+1] :<br />\n          &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;array[j],array[j+1] = array[j+1],array[j]\n        </div>\n          <div style={styles.ifConsole}>j ={highlightFirst}<br />{returnString()}</div>\n        </div>}\n      </div>\n    )\n  }\n\n  function returnNestedRange(nums) {\n    let arr = [...Array(nums).keys()];\n    arr.pop();\n    return arr;\n  }\n\n  function returnString() {\n    if (firstList[highlightFirst] > firstList[highlightSecond]) {\n      return `${firstList[highlightFirst]},${firstList[highlightSecond]} =${firstList[highlightSecond]},${firstList[highlightFirst]}`\n    }\n    return 'no changes';\n  }\n}\n\n","/Users/zat_km/Documents/React project/sorting/src/screens/merge.js",[],"/Users/zat_km/Documents/React project/sorting/src/screens/count.js",["62","63","64","65","66","67"],"/Users/zat_km/Documents/React project/sorting/src/styles/bubbleStyles.js",["68"],{"ruleId":"69","replacedBy":"70"},{"ruleId":"71","replacedBy":"72"},{"ruleId":"73","severity":1,"message":"74","line":2,"column":8,"nodeType":"75","messageId":"76","endLine":2,"endColumn":12},{"ruleId":"73","severity":1,"message":"77","line":6,"column":10,"nodeType":"75","messageId":"76","endLine":6,"endColumn":23},{"ruleId":"73","severity":1,"message":"78","line":17,"column":19,"nodeType":"75","messageId":"76","endLine":17,"endColumn":27},{"ruleId":"73","severity":1,"message":"79","line":2,"column":10,"nodeType":"75","messageId":"76","endLine":2,"endColumn":13},{"ruleId":"73","severity":1,"message":"80","line":2,"column":23,"nodeType":"75","messageId":"76","endLine":2,"endColumn":27},{"ruleId":"73","severity":1,"message":"81","line":2,"column":29,"nodeType":"75","messageId":"76","endLine":2,"endColumn":40},{"ruleId":"73","severity":1,"message":"82","line":2,"column":27,"nodeType":"75","messageId":"76","endLine":2,"endColumn":33},{"ruleId":"73","severity":1,"message":"83","line":2,"column":35,"nodeType":"75","messageId":"76","endLine":2,"endColumn":40},{"ruleId":"73","severity":1,"message":"84","line":37,"column":10,"nodeType":"75","messageId":"76","endLine":37,"endColumn":18},{"ruleId":"85","severity":1,"message":"86","line":243,"column":103,"nodeType":"87","messageId":"88","endLine":243,"endColumn":105},{"ruleId":"85","severity":1,"message":"86","line":254,"column":202,"nodeType":"87","messageId":"88","endLine":254,"endColumn":204},{"ruleId":"85","severity":1,"message":"86","line":274,"column":150,"nodeType":"87","messageId":"88","endLine":274,"endColumn":152},{"ruleId":"73","severity":1,"message":"89","line":3,"column":18,"nodeType":"75","messageId":"76","endLine":3,"endColumn":23},{"ruleId":"73","severity":1,"message":"84","line":44,"column":10,"nodeType":"75","messageId":"76","endLine":44,"endColumn":18},{"ruleId":"85","severity":1,"message":"90","line":299,"column":39,"nodeType":"87","messageId":"88","endLine":299,"endColumn":41},{"ruleId":"73","severity":1,"message":"91","line":362,"column":12,"nodeType":"75","messageId":"76","endLine":362,"endColumn":23},{"ruleId":"85","severity":1,"message":"86","line":377,"column":102,"nodeType":"87","messageId":"88","endLine":377,"endColumn":104},{"ruleId":"85","severity":1,"message":"86","line":400,"column":145,"nodeType":"87","messageId":"88","endLine":400,"endColumn":147},{"ruleId":"73","severity":1,"message":"92","line":1,"column":8,"nodeType":"75","messageId":"76","endLine":1,"endColumn":13},"no-native-reassign",["93"],"no-negated-in-lhs",["94"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'NavigationBar' is defined but never used.","'setItems' is assigned a value but never used.","'Nav' is defined but never used.","'Form' is defined but never used.","'FormControl' is defined but never used.","'Router' is defined but never used.","'Route' is defined but never used.","'initList' is assigned a value but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'Modal' is defined but never used.","Expected '===' and instead saw '=='.","'toggleModal' is defined but never used.","'React' is defined but never used.","no-global-assign","no-unsafe-negation"]